pipeline {
    agent any

    environment {
        // Define environment variables (for Terraform)
        GOOGLE_APPLICATION_CREDENTIALS = 'C:/Users/sksus/Downloads/avian-chariot-450105-b7-da7e611e5b3c.json'
        TF_VAR_region = 'us-central1'  // Define region for your deployment
        TF_VAR_project_id = 'pivotal-data-452009-k8-976873977272' // Define your project ID
        TF_STATE_FILE = "${WORKSPACE}/terraform.tfstate"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/naveenavuladoddi/terraforn-pipeline.git'
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    // Initialize Terraform (to download necessary plugins, providers)
                    withEnv(["GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}"]) {
                        // Using the backend config to specify state file path
                        sh "terraform init -backend-config='path=${TF_STATE_FILE}'"
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    // Run `terraform plan` to see what changes will be made to the infrastructure
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    // Apply the Terraform configuration to create or update resources
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Terraform Cleanup') {
            steps {
                script {
                    // Clean up (optional): remove any temporary files generated by Terraform
                    // Adjust the command to be Windows-compatible
                    if (isUnix()) {
                        sh 'rm -rf .terraform tfplan' // For Unix-based systems
                    } else {
                        bat 'del /F /Q .terraform tfplan' // For Windows
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Terraform state and lock files (if any) after the pipeline completes
            // Make sure the command is valid, otherwise this can be removed if unnecessary
            // If no specific resource is mentioned, the `terraform state rm -lock` is not valid
            sh 'terraform state rm -lock' // Fix if you're removing specific resources from state
        }
    }
}
